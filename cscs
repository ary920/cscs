# A* algorithm

# graph and actual costs
graph = {
    'A': {'B': 10, 'C': 6, 'D': 3, 'E': 4, 'F': 7},
    'B': {'E': 5, 'F': 3, 'C': 2, 'G': 10},
    'C': {'G': 3, 'H': 4, 'D': 5},
    'D': {'H': 5, 'F': 7, 'E': 6},
    'E': {'G': 9, 'H': 7, 'A': 4},
    'F': {'G': 8, 'H': 6, 'C': 5},
    'G': {'H': 2, 'A': 11},
    'H': {'B': 8, 'D': 4}
}

# Heuristic costs

Heuristic = {'A': 8, 'B': 8, 'C': 2, 'D': 7, 'E': 3, 'F': 6, 'G': 0, 'H': 3}


def A_star(graph, start, goal, h):
    parent = dict()
    frontier = {start: h[start]}
    visited = {start: h[start]}
    while frontier:
        sorted_queue = sorted(frontier, key=frontier.get)  # sorted_queue is a list
        node = sorted_queue[0]
        g = frontier.pop(node) - h[node]
        if node == goal:
            return parent
        for n in graph.get(node):
            if n not in visited:
                F = h[n] + graph[node][n] + g
                visited[n] = F
                frontier[n] = F
                parent[n] = node
            else:
                F = h[n] + graph[node][n] + g
                if visited[n] >= F:
                    visited[n] = F
                    frontier[n] = F
                    parent[n] = node


def traceback(parent, start, goal):
    path = [goal]
    while path[-1] != start:
        path.append(parent[path[-1]])
    path.reverse()
    return path

# Test
# parent1 = A_star(graph, 'A', 'G', Heuristic)
# path1 = traceback(parent1, 'A', 'G')
# print("Path from A to G:", path1)
# -----------------------------------------------------------------------------------------------------------------
# BFS

def bfs(graph, start):
    visited = set()
    queue = [start]

    while queue:
        node = queue.pop(0)  # Dequeue the first node
        if node not in visited:
            print(node, end=' ')
            visited.add(node)

            for neighbor in graph[node]:
                if neighbor not in visited:
                    queue.append(neighbor)

# Example graph represented as an adjacency list
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B'],
    'F': ['C']
}

# Start BFS from node 'A'
bfs(graph, 'A')





# -----------------------------------------------------------------------------------------------------------------

# DFS algortihm

def dfs(graph, start, visited=None):
    if visited is None:
        visited = set()
    visited.add(start)

    print(start, end=' ')  # Output the node

    for neighbor in graph[start]:
        if neighbor not in visited:
            dfs(graph, neighbor, visited)

# Example graph represented as an adjacency list
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B'],
    'F': ['C']
}

# Start DFS from node 'A'
dfs(graph, 'A')



# -----------------------------------------------------------------------------------------------------------------





















