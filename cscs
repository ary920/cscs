;   MIdterm Q1- 666            add to values and display it on leds or seven segments    output port D input port B w C




.include "m32def.inc"    ; Include ATmega32 definitions

LDI R20, 0x00            ; Load 0x00 into R20
OUT DDRB, R20            ; Set PORTB as input
OUT DDRC, R20            ; Set PORTC as input

LDI R21, 0xFF            ; Load 0xFF into R21
OUT DDRD, R21            ; Set PORTD as output


HERE:
    IN R22, PINB         ; Read input from PORTB
    IN R23, PINC         ; Read input from PORTC
    
    ADD R22, R23         ; Add the values in R22 and R23
    
    OUT PORTD, R22       ; Output the result to PORTD
    JMP HERE            ; Infinite loop to keep running the process



 ;------------------------------------------------------------------------------------

Q2 - No delay leds     output port b 


.INCLUDE "M32DEF.INC"
main:
ldi r16,0x00
out ddra,r16

ldi r17,0xff
out ddrb,r17


loops:
ldi r20,0x55
out portb,r20
rjmp loops





 ;------------------------------------------------------------------------------------





Q 3 - delay leds :  output port b 


.include "m32def.inc"    ; Include ATmega32 definitions

RESET:
    ldi r16, 0x0F        ; Set lower 4 pins (PC0-PC3) as output
    out DDRC, r16        ; Configure PORTC

LOOP:
    ldi r16, 0x01        ; Start with first LED (PC0)
NEXT_LED:
    out PORTC, r16       ; Output to PORTC
    rcall DELAY          ; Wait for a while
    lsl r16              ; Shift to the next LED
    cpi r16, 0x10        ; Check if we've shifted past PC3
    brne NEXT_LED        ; Repeat for the next LED

    rjmp LOOP            ; Restart the sequence

DELAY:
    ldi r18, 0xFF        ; Load delay counter
WAIT:
    dec r18              ; Decrement counter
    brne WAIT            ; Repeat until counter reaches 0
    ret                  ; Return from delay



;------------------------------------------------------------------------------------






q4 SEVEN SEGMENTS   PORT C W PORT D



.include "m32def.inc"

LDI R20 , 0xFF 
OUT DDRD , R20
OUT DDRC , R20

LDI R16 , 0X00
LDI R23 , 0x64
LDI R24 , 0x9B
OUT PORTC , R16

CALL DELAY

BACK:
    INC R16
    OUT PORTC , R16

    CALL DELAY
    DEC R23
    BRNE BACK

COUNTER: 
    INC R16
    OUT PORTC , R16
    CALL DELAY 
    DEC R24
    BRNE COUNTER
    INC R25
    LDI R16 , 0X00
    OUT PORTC , R16
    OUT PORTD , R25
    CALL DELAY 

END:
    JMP END

DELAY:
    LDI R20,1
L1: LDI R21,100
L2: LDI R22,200
L3: 
    DEC R22
    BRNE L3 
    DEC R21
    BRNE L2 
    DEC R20
    BRNE L1 
    RET



;------------------------------------------------------------------------------------

Q5  XOR     THREE LOGIC STATES PORT B PIN 1,2,3 THREE LEDS PORT C PIN 5 ,6 7 




.include "m32def.inc"

; Initialization
ldi r16, 0xE0         ; Set PORTC.5-7 as output
out DDRC, r16
ldi r16, 0x00         ; Set PORTB.0-2 as input
out DDRB, r16
ldi r16, 0x00         ; Turn off all LEDs initially
out PORTC, r16

main:
    in r16, PINB      ; Read buttons

    ; Check and toggle LEDs
    andi r16, 0x01    ; Button 0
    breq skip_led5
    rcall toggle_led5

skip_led5:
    in r16, PINB
    andi r16, 0x02    ; Button 1
    breq skip_led6
    rcall toggle_led6

skip_led6:
    in r16, PINB
    andi r16, 0x04    ; Button 2
    breq main
    rcall toggle_led7

    rjmp main

toggle_led5:
    ldi r17, 0x20     ; Toggle PORTC.5
    in r18, PORTC
    eor r18, r17
    out PORTC, r18
    ret

toggle_led6:
    ldi r17, 0x40     ; Toggle PORTC.6
    in r18, PORTC
    eor r18, r17
    out PORTC, r18
    ret

toggle_led7:
    ldi r17, 0x80     ; Toggle PORTC.7
    in r18, PORTC
    eor r18, r17
    out PORTC, r18
    ret














